import win32com.client as win32import globals_var as gvarimport mathfrom openpyxl import load_workbook as lw# from openpyxl import load_workbook as lwimport reimport excelimport xlwings as xwimport timeimport openpyxlimport os, sys, win32from openpyxl import Workbook# 格式化成2016-03-20 11:45:39形式# 投影圖尺寸計算def projection_parameter_calculation(width, height, depth, papersize, scale_p):    # ---------------------------INITIAL PARAMETER SETTINGS-----------------------------------------------------(初始參數設定)    scale_tmp = scale_p  # temping original scale    scale = 1 / scale_p  # proportion convert to ratio    drafting_area_centerX = gvar.box_draft_area_center_initX    drafting_area_centerY = gvar.box_draft_area_center_initY    w_scale = width * scale  # box width after scaling    h_scale = height * scale  # box height after scaling    d_scale = depth * scale  # box depth after scaling    # ---------------------------FULL PROJECTION PARAMETER SETTINGS-----------------------------------------(全投影計算)    drafting_area_X_range = h_scale * 3 + d_scale * 2 + gvar.box_draft_X_clearence * 4    drafting_area_Y_range = d_scale * 2 + w_scale + gvar.box_draft_Y_clearence * 2    drafting_area_extremum = [drafting_area_centerX - drafting_area_X_range / 2,                              drafting_area_centerX + drafting_area_X_range / 2,                              drafting_area_centerY - drafting_area_Y_range / 2,                              drafting_area_centerY + drafting_area_Y_range / 2]    # --------------------------ISOMETRIC VIEW PARAMETER SETTINGS----------------------------------------------(等角投影計算)    isometric_view_area_centerX = gvar.bom_isomertic_view_center_initX    isometric_view_area_centerY = gvar.bom_isometric_view_center_initY    # area range setting (assume using 30 degree isometric view))    isometric_view_X_range = h_scale * math.cos(math.radians(30)) + d_scale * math.cos(math.radians(30))    isometric_view_Y_range = h_scale * math.sin(math.radians(30)) + d_scale * math.sin(math.radians(30)) + w_scale    isometric_view_extremum = [isometric_view_area_centerX - isometric_view_X_range / 2,                               isometric_view_area_centerX + isometric_view_X_range / 2,                               isometric_view_area_centerY - isometric_view_Y_range / 2,                               isometric_view_area_centerY + isometric_view_Y_range / 2]    # -----------------------------SETTING SCALE RECALIBRATION FLAG---------------------------------------(設定比例指標)    scale_recalibration_flag = False    # --------------------------FULL PROJECTION PARAMETER CALCULATION-------------------------------(全投影位置計算)    # check X LEFT extremum(確認X左極值)    while True:        if drafting_area_extremum[0] < 5:            drafting_area_centerX += 2            # recalculate            drafting_area_extremum[0] = drafting_area_centerX - drafting_area_X_range / 2            drafting_area_extremum[1] = drafting_area_centerX + drafting_area_X_range / 2        elif drafting_area_extremum[0] > 10:            drafting_area_centerX -= 2            # recalculate            drafting_area_extremum[0] = drafting_area_centerX - drafting_area_X_range / 2            drafting_area_extremum[1] = drafting_area_centerX + drafting_area_X_range / 2        else:            break    # check X RIGHT extremum(確認X右極值)    while True:        if drafting_area_extremum[1] > 212:            scale_recalibration_flag = True            break        else:            break    # check Y extremum(確認Y極值)    while True and scale_recalibration_flag == False:        if drafting_area_extremum[2] < 24.4 and drafting_area_extremum[3] > 205:            scale_recalibration_flag = True            break        elif drafting_area_extremum[2] < 24.4:            drafting_area_centerY += 2            # recalculate            drafting_area_extremum[2] = drafting_area_centerY - drafting_area_Y_range / 2            drafting_area_extremum[3] = drafting_area_centerY + drafting_area_Y_range / 2        elif drafting_area_extremum[3] > 205:            drafting_area_centerY -= 2            # recalculate            drafting_area_extremum[2] = drafting_area_centerY - drafting_area_Y_range / 2            drafting_area_extremum[3] = drafting_area_centerY + drafting_area_Y_range / 2        else:            break    # -------------------------------ISOMETRIC VIEW PARAMETER CALCULATION-------------------------(等角投影位置計算)    # check X extremum(X極值)    while True:  # and scale_recalibration_flag == False:        if isometric_view_extremum[0] < drafting_area_extremum[1] + 5 and isometric_view_extremum[1] > 292:            scale_recalibration_flag = True            break        elif isometric_view_extremum[0] < drafting_area_extremum[1] + 5:            isometric_view_area_centerX += 1            # recaculate            isometric_view_extremum[0] = isometric_view_area_centerX - isometric_view_X_range / 2            isometric_view_extremum[1] = isometric_view_area_centerX + isometric_view_X_range / 2        elif isometric_view_extremum[1] > 292:            isometric_view_area_centerX -= 1            # recalculate            isometric_view_extremum[0] = isometric_view_area_centerX - isometric_view_X_range / 2            isometric_view_extremum[1] = isometric_view_area_centerX + isometric_view_X_range / 2        else:            break    # check Y extremum(Y極值)    while True:  # and scale_recalibration_flag == False:        if isometric_view_extremum[2] < 29.4 and isometric_view_extremum[3] > 200:            # scale_recalibration_handler(width,height,depth,papersize,scale_tmp)            scale_recalibration_flag = True            break        elif isometric_view_extremum[2] < 29.4:            isometric_view_area_centerY += 1            # recalculate            isometric_view_extremum[2] = isometric_view_area_centerY - isometric_view_Y_range / 2            isometric_view_extremum[3] = isometric_view_area_centerY + isometric_view_Y_range / 2        elif isometric_view_extremum[3] > 200:            isometric_view_area_centerY -= 1            # recalculate            isometric_view_extremum[2] = isometric_view_area_centerY - isometric_view_Y_range / 2            isometric_view_extremum[3] = isometric_view_area_centerY + isometric_view_Y_range / 2        else:            break    # ----------------------------------ISOMETRIC VIEW SYMMETRY CALCULATION---------------------(等角投影X方向中心位置)    if scale_recalibration_flag == False:        # isometric_view_nX_gap = isometric_view_extremum[0]-drafting_area_extremum[1]        # isometric_view_pX_gap = 292-isometric_view_extremum[1]        # isometric_view_symmetry_value = isometric_view_pX_gap/2 + isometric_view_nX_gap/2        # isometric_view_nX_adjustment = isometric_view_symmetry_value - isometric_view_nX_gap        # isometric_view_pX_adjustment = isometric_view_symmetry_value - isometric_view_pX_gap        # isometric_view_area_centerX += isometric_view_nX_adjustment        isometric_view_area_centerX = 255        if width >= 1000:            isometric_view_area_centerY = 140        if width >= 1200:            isometric_view_area_centerY = 152    # -------------------------------DATA OUTPUT to CONSOLE-------------------------------------(輸出位置結果)    print(drafting_area_extremum)    print(drafting_area_centerX)    print(drafting_area_centerY)    print(isometric_view_extremum)    print(isometric_view_area_centerX)    print(isometric_view_area_centerY)    print(scale_tmp)    # calculate every view's center point    drafting_view_center_data = []  # create list    drafting_view_center_data.append([drafting_area_centerX - h_scale - gvar.box_draft_X_clearence,                                      drafting_area_centerY])  # Front View(MASTER) center    drafting_view_center_data.append([drafting_area_centerX, drafting_area_centerY])  # Front View(Door Removed) center    drafting_view_center_data.append([drafting_area_centerX + h_scale + d_scale + gvar.box_draft_X_clearence * 2,                                      drafting_area_centerY])  # Rear View    drafting_view_center_data.append([drafting_view_center_data[0][0],                                      drafting_area_centerY + w_scale * 0.5 + d_scale * 0.5 + gvar.box_draft_Y_clearence])  # Top View    drafting_view_center_data.append([drafting_view_center_data[0][0],                                      drafting_area_centerY - w_scale * 0.5 - d_scale * 0.5 - gvar.box_draft_Y_clearence])  # Bottom View    drafting_view_center_data.append(        [drafting_area_centerX - h_scale * 1.5 - d_scale * 0.5 - gvar.box_draft_X_clearence * 2,         drafting_area_centerY])  # left view    drafting_view_center_data.append(        [drafting_area_centerX + h_scale * 0.5 + d_scale * 0.5 + gvar.box_draft_X_clearence,         drafting_area_centerY])  # right view    drafting_view_center_data.append([isometric_view_area_centerX,                                      isometric_view_area_centerY + gvar.box_isometric_view_clearence / 2 + w_scale / 2 +                                      d_scale * math.sin(math.radians(30)) / 2 + h_scale * math.sin(                                          math.radians(30)) / 2])  # isometric view(door removed)    drafting_view_center_data.append([isometric_view_area_centerX,                                      isometric_view_area_centerY - gvar.box_isometric_view_clearence / 2 - w_scale / 2 -                                      d_scale * math.sin(math.radians(30)) / 2 - h_scale * math.sin(                                          math.radians(30)) / 2])  # isometric view    return [drafting_view_center_data, scale_tmp,            scale_recalibration_flag]  # return center_data,scale,recalibration flagdef Box_full_projection_from_template(drawingview_para, scale_p):    # -------------------Convert scale proportion to ratio--------    scale = 1 / scale_p    # -------------------Load Template---------------------------    catapp = win32.Dispatch('CATIA.Application')    document = catapp.Documents    drawingdocument = catapp.ActiveDocument    # drawingdocument = document.Open(gvar.system_root+gvar.mother_drafting_template+'A4_Box'+'.CATDrawing')    # --------------drafting parameter settings---------------    drawingview_direction = [4, 2, 3, 1, 0]    # -------------main program----------------------(投影圖投影至表單1)    drawingsheets = drawingdocument.Sheets    drawingsheet = drawingsheets.Item('Sheet.1')    drawingviews1 = drawingsheet.Views    productdoc = document.Item('Product.CATProduct')    # activedoc = catapp.ActiveDocument    # productdoc =catapp.ActiveDocument    product = productdoc.Product    selection = productdoc.Selection    # --------------------initial front view create(投影前視圖    drawingview1 = drawingviews1.Add('AutomaticNaming')    drawingview1.X = drawingview_para[0][0]    drawingview1.Y = drawingview_para[0][1]    drawingview1.Scale = scale    drawingviewgenerativelinks1 = drawingview1.GenerativeLinks    drawingviewgenerativebehavior1 = drawingview1.GenerativeBehavior    drawingviewgenerativebehavior1.Document = product    drawingviewgenerativebehavior1.DefineFrontView(-1, 0, 0, 0, 0, 1)  # Vector Direction Value    drawingviewgenerativebehavior1.Update()    drawingtexts1 = drawingview1.Texts    drawingtext1 = drawingtexts1.Item(1)    print(drawingtext1, '\n', drawingtext1)    drawingtexts1 = drawingtext1.Parent    selection.Add(drawingtext1)    selection.Delete()    selection.Clear()    # ----------------3nd to 7th------------------------------    view_name = ['Front view', 'Mtplt view', 'Rear view', 'Top view', 'Bottom view', 'Left view', 'Right view']    for i in range(2, len(drawingview_para) - 2):        drawingview3 = drawingviews1.Add('AutomaticNaming')        drawingview3.X = drawingview_para[i][0]        drawingview3.Y = drawingview_para[i][1]        drawingview3.Scale = scale        drawingviewgenerativelinks3 = drawingview3.GenerativeLinks        drawingviewgenerativebehavior3 = drawingview3.GenerativeBehavior        drawingviewgenerativebehavior3.Document = product        drawingviewgenerativebehavior1 = drawingview1.GenerativeBehavior        drawingviewgenerativebehavior3.DefineProjectionView(drawingviewgenerativebehavior1, drawingview_direction[            i - 2])  # define projection direction (catRightView = 0, catLeftView = 1, catTopView = 2, catBottomView = 3, catRearView = 4)        drawingviewgenerativebehavior3.Update()        drawingview3 = drawingviews1.Item('%s' % view_name[i])        drawingtexts3 = drawingview3.Texts        drawingtext3 = drawingtexts3.Item(1)        drawingtexts3 = drawingtext3.Parent        selection.Add(drawingtext3)        selection.Delete()        selection.Clear()    # -----------------isometric view create----------------    drawingview8 = drawingviews1.Add('Isometric view.2')    drawingview8.X = drawingview_para[len(drawingview_para) - 1][0]    drawingview8.Y = drawingview_para[len(drawingview_para) - 1][1]    drawingview8.Scale = scale    drawingviewgenerativelinks8 = drawingview8.GenerativeLinks    drawingviewgenerativebehavior8 = drawingview8.GenerativeBehavior    drawingviewgenerativebehavior8.Document = product    drawingviewgenerativebehavior8.DefineIsometricView(-0.707, 0.707, 0, -0.4082, -0.4082, 0.8164)    drawingviewgenerativebehavior8.Update()    # ----------------Delete isometric text label--------------------------------    drawingview8 = drawingviews1.Item('Isometric view.2')    drawingtexts8 = drawingview8.Texts    drawingtext8 = drawingtexts8.Item(1)    drawingtexts8 = drawingtext8.Parent    selection = productdoc.Selection    selection.Add(drawingtext8)    selection.Delete()    selection.Clear()    # --------------------Hide Door Part---------------------    selection = productdoc.Selection    vispropertyset = selection.VisProperties    products = product.Products    product2 = products.Item('Door_Panel.1')    products = product2.Parent    bstr1 = product2.Name    selection.Add(product2)    vispropertyset = vispropertyset.Parent    vispropertyset.SetShow(1)    selection.Clear()    # -------------------Hide Lock---------------------------(隱藏鎖頭)    if int(gvar.width) < 500:        L_num = 2    elif int(gvar.width) >= 500 and int(gvar.width) < 1000:        L_num = 3    elif int(gvar.width) >= 1000:        L_num = 4    for i in range(0, L_num):        try:            product3 = products.Item('%s.%s' % (gvar.lock_part_name[0], i + 1))            products = product3.Parent            bstr2 = product3.Name            selection.Add(product3)            vispropertyset = vispropertyset.Parent            vispropertyset.SetShow(1)            selection.Clear()        except:            pass    for i in range(0, L_num):        try:            product3 = products.Item('%s.1' % (gvar.lock_part_name[1], i + 1))            selection.Add(product3)            vispropertyset = vispropertyset.Parent            vispropertyset.SetShow(1)            selection.Clear()        except:            pass    # --------------------Box front View(Door Removed) Create(投影底板)    drawingview2 = drawingviews1.Add('Mtplt view')    drawingview2.X = drawingview_para[1][0]    drawingview2.Y = drawingview_para[1][1]    drawingview2.Scale = scale    drawingviewgenerativelinks2 = drawingview2.GenerativeLinks    drawingviewgenerativebehavior2 = drawingview2.GenerativeBehavior    drawingviewgenerativebehavior2.Document = product    drawingviewgenerativebehavior2.DefineFrontView(-1, 0, 0, 0, 0, 1)  # Vector Direction Value    drawingviewgenerativebehavior2.Update()    drawingview2 = drawingviews1.Item('Mtplt view')    drawingtexts2 = drawingview2.Texts    drawingtext2 = drawingtexts2.Item(1)    drawingtexts2 = drawingtext2.Parent    selection.Add(drawingtext2)    selection.Delete()    selection.Clear()    # --------------Activate View---------------------    drawingview1.Activate()    # -------------------show Door Part------------------    selection.Add(product2)    vispropertyset = vispropertyset.Parent    vispropertyset.SetShow(0)    selection.Clear()    # ------------------Show Lock Part--------------------    for i in range(0, L_num):        try:            product3 = products.Item('%s.%s' % (gvar.lock_part_name[0], i + 1))            products = product3.Parent            bstr2 = product3.Name            selection.Add(product3)            vispropertyset = vispropertyset.Parent            vispropertyset.SetShow(0)            selection.Clear()        except:            pass    for i in range(0, L_num):        try:            product3 = products.Item('%s.1' % (gvar.lock_part_name[1], i + 1))            selection.Add(product3)            vispropertyset = vispropertyset.Parent            vispropertyset.SetShow(0)            selection.Clear()        except:            pass    # -----------------Activate View-------------------    drawingview1.Activate()    # ---------------resetting view to full-view-----------    SpecsAndGeomWindow = catapp.ActiveWindow    specViewer = SpecsAndGeomWindow.ActiveViewer    specViewer.Reframe()    # ----------------------Sheet Bom-------------------    drawingsheet = drawingsheets.Item('Sheet.2')    drawingviews1 = drawingsheet.Views    drawingview8 = drawingviews1.Add('Isometric view.2')    drawingview8.X = drawingview_para[len(drawingview_para) - 1][0]    drawingview8.Y = drawingview_para[len(drawingview_para) - 1][1]    drawingview8.Scale = scale    drawingviewgenerativelinks8 = drawingview8.GenerativeLinks    drawingviewgenerativebehavior8 = drawingview8.GenerativeBehavior    drawingviewgenerativebehavior8.Document = product    drawingviewgenerativebehavior8.DefineIsometricView(-0.707, 0.707, 0, -0.4082, -0.4082, 0.8164)    drawingviewgenerativebehavior8.Update()    drawingview8 = drawingviews1.Item('Isometric view.2')    drawingtexts8 = drawingview8.Texts    drawingtext8 = drawingtexts8.Item(1)    drawingtexts8 = drawingtext8.Parent    selection.Add(drawingtext8)    selection.Delete()    selection.Clear()# 資訊輸入至BOM表def add_bom_infomation(draft_info, box_info):    catapp = win32.Dispatch('CATIA.Application')    document = catapp.Documents    drawingdocument = document.Open(gvar.system_root + gvar.mother_drafting_template + 'A4_Window' + '.CATDrawing')    # View表單    drawingsheets = drawingdocument.Sheets    drawingsheet = drawingsheets.Item('Sheet.1')    drawingview = drawingsheet.Views.Item('Background View')    for i in range(0, 12):  # len(gvar.drafting_info_text_position_A4)-3):        sheettext1 = drawingview.Texts.Add(draft_info[i], gvar.drafting_info_text_position_A4[i][0],                                           gvar.drafting_info_text_position_A4[i][1])        sheettext1.SetFontSize(0, 0, gvar.drafting_info_text_position_A4[i][2])        sheettext1.SetFontName(0, 0, 'Arial Unicode MS (TrueType)')        sheettext1.AnchorPosition = gvar.drafting_info_text_position_A4[i][            3]  # TopL=1,MidL=2,BottomL=3,TopM=4,MidM=5,BottomM=6,TopR=7,MidR=8,BottomR=9    # --------------------------------add material info----------------------    material_info = '材料:%s-%s\n烤漆:%s' % (box_info[4], box_info[5], box_info[6])    sheettext1 = drawingview.Texts.Add(material_info, gvar.drafting_info_text_position_A4[13][0],                                       gvar.drafting_info_text_position_A4[13][1])    sheettext1.SetFontSize(0, 0, gvar.drafting_info_text_position_A4[13][2])    sheettext1.SetFontName(0, 0, 'Arial Unicode MS (TrueType)')    sheettext1.AnchorPosition = gvar.drafting_info_text_position_A4[13][3]    sheettext1 = drawingview.Texts.Add('此圖面為CATIA生成', 2, 3)    sheettext1.SetFontSize(0, 0, 3)    sheettext1.SetFontName(0, 0, 'Arial Unicode MS (TrueType)')    sheettext1.AnchorPosition = 2    # Bom表單    drawingsheet = drawingsheets.Item('Sheet.2')    drawingview = drawingsheet.Views.Item('Background View')    for i in range(0, 12):  # len(gvar.drafting_info_text_position_A4)-3):        sheettext1 = drawingview.Texts.Add(draft_info[i], gvar.drafting_info_text_position_A4[i][0],                                           gvar.drafting_info_text_position_A4[i][1])        sheettext1.SetFontSize(0, 0, gvar.drafting_info_text_position_A4[i][2])        sheettext1.SetFontName(0, 0, 'Arial Unicode MS (TrueType)')        sheettext1.AnchorPosition = gvar.drafting_info_text_position_A4[i][            3]  # TopL=1,MidL=2,BottomL=3,TopM=4,MidM=5,BottomM=6,TopR=7,MidR=8,BottomR=9    sheettext1 = drawingview.Texts.Add('此圖面為CATIA生成', 1, 65)    sheettext1.SetFontSize(0, 0, 3)    sheettext1.SetFontName(0, 0, 'Arial Unicode MS (TrueType)')    sheettext1.AnchorPosition = 2def bom_contents(width, height, box_gen_data):    paintwork = box_gen_data[6]    # 開啟Excel    # workbooks=excel.Workbooks.Open(r'C:\Users\PDAL-BM-1\Desktop\GITHUB\AL_window\Dwg\物料清單.xlsx')    workbooks = lw(r'%s\Dwg\物料清單.xlsx' % (gvar.system_root), data_only=True)    print(workbooks.sheetnames)    # 確認輸入的箱體數據    product_data = str('AL%s%s' % (width // 10, height // 10) + '15')    print("product_data = %s" % (product_data))    # sheet = workbooks.Worksheets("包裝總成")    sheet_1 = workbooks.get_sheet_by_name("外框總成")    sheet_2 = workbooks.get_sheet_by_name("左門板總成")    sheet_3 = workbooks.get_sheet_by_name("右門板總成")    sheet_4 = workbooks.get_sheet_by_name("標準零件號")    #    # 匯入產品名稱    product_bom = []    for i in range(4, 50):        product_bom.append(sheet_1["A%s" % (i)].value)    print("product_bom = %s" % (product_bom))    #    # 找出該箱體的包裝序列    # print(product_data)    if product_data in product_bom:        i = product_bom.index(product_data)        product_number = i + 4        product_name = product_data        # print("product_bom = %s" % (product_bom))        print("product_name = %s" % (product_name))        print("product_number = %s" % (product_number))        #        packing_item = [[], [], [], [], [], [], [], [], [], [], [], []]        alphabet_list_1 = [['P', 'S', 'R'], ['U', 'X', 'W'], ['Z', 'AC', 'AB'], ['AE', 'AH', 'AG']]        # ['AJ', 'AL', 'AM'],['AO', 'AP', 'AQ'], ['AS', 'AT', 'AU']]        part_list_item = [[], [], [], [], [], [], [], []]        alphabet_list_2 = [['E', 'H', 'G', 'F'], ['J', 'M', 'L', 'K'], ['O', 'R', 'Q', 'P'], ['T', 'W', 'V', 'U']]        # ['Y', 'Z', 'AA', 'AB'], ['AD', 'AE', 'AF', 'AG'], ['AI', 'AJ', 'AK', 'AL']]        # alphabet_list_3 = [[],[],[],[],[],]        # 匯入該箱體包裝所需項目        print(gvar.Quantity)        for x in range(0, 4):            for y in range(0, 3):                packing_item[x].append(sheet_1["%s%s" % (alphabet_list_1[x][y], product_number)].value)        for x in range(0, 4):            for y in range(0, 4):                packing_item[x + 4].append(sheet_2["%s%s" % (alphabet_list_2[x][y], product_number)].value)        for x in range(0, 4):            for y in range(0, 4):                packing_item[x + 8].append(sheet_3["%s%s" % (alphabet_list_2[x][y], product_number)].value)        # print("packing_item = %s"%(packing_item))        print("packing_item = ")        for i in range(0, len(packing_item)):            print(packing_item[i], '\n')        # 將資料匯入BOM表        catapp = win32.Dispatch('CATIA.Application')        document = catapp.Documents        drawingdocument = catapp.ActiveDocument        drawingsheets = drawingdocument.Sheets        drawingsheet = drawingsheets.Item('Sheet.2')        drawingview = drawingsheet.Views.Item('Background View')        # print(packing_item)        for i in range(0, len(packing_item)):  # len(gvar.packing_item_text_position_A4)-3):            for j in range(0, 3):                if j == 1:                    sheettext1 = drawingview.Texts.Add(packing_item[i][j] * gvar.Quantity,                                                       gvar.packing_item_text_position_A4[j][0],                                                       gvar.packing_item_text_position_A4[j][1] - i * 4.9)                    sheettext1.SetFontSize(0, 0, gvar.packing_item_text_position_A4[j][2])                    sheettext1.SetFontName(0, 0, 'Arial Unicode MS (TrueType)')                    sheettext1.AnchorPosition = gvar.packing_item_text_position_A4[j][                        3]  # TopL=1,MidL=2,BottomL=3,TopM=4,MidM=5,BottomM=6,TopR=7,MidR=8,BottomR=9                else:                    sheettext1 = drawingview.Texts.Add(packing_item[i][j], gvar.packing_item_text_position_A4[j][0],                                                       gvar.packing_item_text_position_A4[j][1] - i * 4.9)                    sheettext1.SetFontSize(0, 0, gvar.packing_item_text_position_A4[j][2])                    sheettext1.SetFontName(0, 0, 'Arial Unicode MS (TrueType)')                    sheettext1.AnchorPosition = gvar.packing_item_text_position_A4[j][                        3]  # TopL=1,MidL=2,BottomL=3,TopM=4,MidM=5,BottomM=6,TopR=7,MidR=8,BottomR=9    else:        abcd = ['A', 'B', 'C', 'D', '-A', '-B', '-C', '-D', '-A', '-B', '-C', '-D']        product_number = 4        product_name = product_data        print("product_name = %s" % (product_name))        print("product_number = %s" % (product_number))        packing_item = [[], [], [], [], [], [], [], [], [], [], [], []]        alphabet_list_1 = [['P', 'S', 'R'], ['U', 'X', 'W'], ['Z', 'AC', 'AB'], ['AE', 'AH', 'AG']]        # ['AJ', 'AL', 'AM'],['AO', 'AP', 'AQ'], ['AS', 'AT', 'AU']]        part_list_item = [[], [], [], [], [], [], [], []]        alphabet_list_2 = [['E', 'H', 'G', 'F'], ['J', 'M', 'L', 'K'], ['O', 'R', 'Q', 'P'], ['T', 'W', 'V', 'U']]        # ['Y', 'Z', 'AA', 'AB'], ['AD', 'AE', 'AF', 'AG'], ['AI', 'AJ', 'AK', 'AL']]        # alphabet_list_3 = [[], [], [], [], [], ]        # 匯入該箱體包裝所需項目        for x in range(0, 4):            for y in range(0, 3):                packing_item[x].append(sheet_1["%s%s" % (alphabet_list_1[x][y], product_number)].value)        # print("packing_item = %s"%(packing_item))        for x in range(0, 4):            for y in range(0, 3):                packing_item[x + 4].append(sheet_2["%s%s" % (alphabet_list_2[x][y], product_number)].value)        # print("packing_item = %s"%(packing_item))        for x in range(0, 4):            for y in range(0, 3):                packing_item[x + 8].append(sheet_3["%s%s" % (alphabet_list_2[x][y], product_number)].value)        # print("packing_item = %s"%(packing_item))        for i in range(0, 12):            for j in range(0, 1, 1):                change_data = re.findall(r'\D+', packing_item[i][j])  # r'\D+'                packing_item[i][j] = (change_data[0] + '%s%s' % (int(gvar.width), int(gvar.height)))        #     part_list_item[i][1]='特'        print("packing_item = %s" % (packing_item))        for i in range(0, 12):            for j in range(0, 1, 1):                packing_item[i][j] = (packing_item[i][j] + abcd[i])        # 將資料匯入BOM表        catapp = win32.Dispatch('CATIA.Application')        document = catapp.Documents        drawingdocument = catapp.ActiveDocument        drawingsheets = drawingdocument.Sheets        drawingsheet = drawingsheets.Item('Sheet.2')        drawingview = drawingsheet.Views.Item('Background View')        for i in range(0, len(packing_item)):  # len(gvar.packing_item_text_position_A4)-3):            for j in range(0, 3):                if j == 1:                    sheettext1 = drawingview.Texts.Add(packing_item[i][j] * gvar.Quantity,                                                       gvar.packing_item_text_position_A4[j][0],                                                       gvar.packing_item_text_position_A4[j][1] - i * 4.9)                    sheettext1.SetFontSize(0, 0, gvar.packing_item_text_position_A4[j][2])                    sheettext1.SetFontName(0, 0, 'Arial Unicode MS (TrueType)')                    sheettext1.AnchorPosition = gvar.packing_item_text_position_A4[j][                        3]  # TopL=1,MidL=2,BottomL=3,TopM=4,MidM=5,BottomM=6,TopR=7,MidR=8,BottomR=9                else:                    sheettext1 = drawingview.Texts.Add(packing_item[i][j], gvar.packing_item_text_position_A4[j][0],                                                       gvar.packing_item_text_position_A4[j][1] - i * 4.9)                    sheettext1.SetFontSize(0, 0, gvar.packing_item_text_position_A4[j][2])                    sheettext1.SetFontName(0, 0, 'Arial Unicode MS (TrueType)')                    sheettext1.AnchorPosition = gvar.packing_item_text_position_A4[j][                        3]  # TopL=1,MidL=2,BottomL=3,TopM=4,MidM=5,BottomM=6,TopR=7,MidR=8,BottomR=9        # print("packing_item = %s" % (packing_item))# bom_whd_value=[200,200]# window_gen_data=[200,200,200,200,200,200,200]# bom_contents(bom_whd_value[0], bom_whd_value[1], window_gen_data)def Excel_Bom(draft_gen_data, load):    print(draft_gen_data)    app_excel = xw.App(visible=True, add_book=False)    # 新建工作簿    # wb = app.books.add()    wb = app_excel.books.open('C:\\Users\\PDAL-BM-1\\Desktop\\GITHUB\\AL_window\\AL_window\\bom.xlsx')    # 頁sheet1    sht = wb.sheets["工作表1"]    # 單元格內容    sht.range("C1").value = "%s" % draft_gen_data[7]  # 變數1產品名稱    sht.range("C2").value = "%s" % draft_gen_data[8]  # 變數2圖號    sht.range("C3").value = "%s" % draft_gen_data[0]  # 變數3交期    # sht.range("D3").value = "從缺"    sht.range("F1").value = "%s" % draft_gen_data[6]    dim_time = time.strftime("%Y-%m-%d %H:%M", time.localtime())    sht.range("F2").value = "%s" % dim_time    # 產品數量    # dim_Quantity=['1','1','1','1','1','1',"1",'1','1','1','1','1','10','8']    for i in range(0, 14):        print("E%s" % i)        print([gvar.dim_Quantity[i] * int(draft_gen_data[6])])        sht.range("E%s" % int(i + 5)).value = [gvar.dim_Quantity[i] * int(            draft_gen_data[6])]  # sht.range("E5:E17").value = ["1",'1','2','1','1','1','1','1','1','1','1','10','8']    r = sht.range('E5:E6').value    print(r)    for i in range(5, 19):        print(i)        k = i - 5        print(k)        sht.range("B%s" % i).value = "%s" % gvar.Ex_bom[k]    saveExcel = load    wb.save("%s\\Bom.xlsx" % saveExcel)    app_excel.quit()# def pdf_save():#     path = "C:\catia\“#     sourcetype = "CATDrawing”#     desttype = "pdf"#     catapp = win32.Dispatch("CATIA.Application")#     catapp.Visible = 1#     filelist = os.listdir(path)#     drawinglist = []#     for file in filelist:#         if file.endswith(sourcetype):#             # 打开图纸#             catdoc = catapp.Documents.Open(path + file)#             # 另存为PDF##             catdoc.ExportData(path + file[0:15] + desttype, desttype)# pdf_save(gvar.full_save_dir, 'A4_Window', 'pdf')# pdf_save()# Excel_Bom(['2021/02/04', 'HRC20', '昱瑋', '昱瑋', '昱瑋', 'Aluminum', '1', '自動化產品設計系統', 'TEST1', 'mm', '備註:'],gvar.full_save_dir)# saveExcel = gvar.full_save_dir# print("%s\\bom.xlsx" % saveExcel)